{"ast":null,"code":"var _jsxFileName = \"E:\\\\web1102\\\\\\u7B2C\\u56DB\\u9636\\u6BB5\\\\react\\\\reactdemo\\\\src\\\\pages\\\\refs\\\\ref.jsx\";\nimport React, { Component } from 'react';\nimport Child from './Child';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Ref extends Component {\n  constructor() {\n    super(); // 方式三：创建ref对象\n\n    this.refAdd = /*#__PURE__*/React.createRef();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-info\",\n      children: /*#__PURE__*/_jsxDEV(Child, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this);\n  }\n\n  change() {\n    // 用法一:操作元素内容\n    this.refs.div.innerHTML = '<i>更改后的内容</i>';\n    this.refs.div.style.color = 'yellow';\n  }\n\n  change1() {\n    // 用法二，可以作为形参传递当前元素\n    console.log(this.add);\n  }\n\n  change2() {\n    // 用法二，可以作为形参传递当前元素\n    console.log(this.refAdd); //{current: div}对象\n\n    console.log(this.refAdd.current); //当前元素\n  }\n\n}","map":{"version":3,"sources":["E:/web1102/第四阶段/react/reactdemo/src/pages/refs/ref.jsx"],"names":["React","Component","Child","Ref","constructor","refAdd","createRef","render","change","refs","div","innerHTML","style","color","change1","console","log","add","change2","current"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AACA,eAAe,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AACvCG,EAAAA,WAAW,GAAE;AACT,YADS,CAET;;AACA,SAAKC,MAAL,gBAAcL,KAAK,CAACM,SAAN,EAAd;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,6BAaI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAbJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAiBH;;AACDC,EAAAA,MAAM,GAAE;AACJ;AACA,SAAKC,IAAL,CAAUC,GAAV,CAAcC,SAAd,GAA0B,eAA1B;AACA,SAAKF,IAAL,CAAUC,GAAV,CAAcE,KAAd,CAAoBC,KAApB,GAA4B,QAA5B;AACH;;AACDC,EAAAA,OAAO,GAAE;AACL;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,GAAjB;AACH;;AACDC,EAAAA,OAAO,GAAE;AACL;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,MAAjB,EAFK,CAEoB;;AACzBU,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,MAAL,CAAYc,OAAxB,EAHK,CAG4B;AACpC;;AAtCsC","sourcesContent":["import React, { Component } from 'react'\r\nimport Child from './Child'\r\nexport default class Ref extends Component {\r\n    constructor(){\r\n        super();\r\n        // 方式三：创建ref对象\r\n        this.refAdd = React.createRef();\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='alert alert-info'>\r\n                {/* 方式一 */}\r\n                {/* <div ref='div'>测试div</div> */}\r\n                {/* <button className='btn btn-success' onClick={()=>this.change()}>更改样式</button> */}\r\n\r\n                {/* 方式二 */}\r\n                {/* <div ref={dom=>this.add=dom}>方式二测试</div>\r\n                <button className='btn btn-success' onClick={()=>this.change1()}>二</button> */}\r\n\r\n                {/* 方式三 */}\r\n                {/* <div ref={this.refAdd}>方式三测试</div>\r\n                <button className='btn btn-success' onClick={()=>this.change2()}>三</button> */}\r\n\r\n                <Child></Child>\r\n            </div>\r\n        )\r\n    }\r\n    change(){\r\n        // 用法一:操作元素内容\r\n        this.refs.div.innerHTML = '<i>更改后的内容</i>';\r\n        this.refs.div.style.color = 'yellow';\r\n    };\r\n    change1(){\r\n        // 用法二，可以作为形参传递当前元素\r\n        console.log(this.add);\r\n    };\r\n    change2(){\r\n        // 用法二，可以作为形参传递当前元素\r\n        console.log(this.refAdd);//{current: div}对象\r\n        console.log(this.refAdd.current);//当前元素\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}